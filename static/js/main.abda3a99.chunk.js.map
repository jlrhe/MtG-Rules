{"version":3,"sources":["parser/parser.js","components/rule/rule.component.jsx","components/chapter/chapter.component.jsx","components/chapter-selector/chapter-selector.component.jsx","components/section/section.component.jsx","components/table-of-contents/table-of-contents.component.jsx","components/search-box/search-box.component.jsx","App.js","index.js"],"names":["parser","rawRules","length","undefined","id","chapters","rules","rule","filteredRules","split","map","element","trimmedElement","trim","slice","filter","value","isNaN","i","shift","parsedRules","forEach","push","title","section","parseInt","chapterIndex","indexOf","example","Rule","className","Chapter","ChapterSelector","Section","TableOfContents","SearchBox","placeholder","handleChange","type","onChange","App","useState","setRules","selectedSection","setSelectedSection","selectedChapter","setSelectedChapter","selectedChapterData","setSelectedChapterData","rulesUrl","setParsedRules","useEffect","fetch","then","response","text","textString","find","chapter","changeSection","changeChapter","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.abda3a99.chunk.js","sourcesContent":["const parser = (rawRules) => {\r\n  //if the rules haven't been fetched yet\r\n  if (rawRules.length <= 0 || rawRules === undefined) {\r\n    return [\r\n      {\r\n        id: \"1.\",\r\n        chapters: [\r\n          { id: \"100.\", rules: [{ id: \"100.1.\", rule: \"Loading Rules...\" }] },\r\n        ],\r\n      },\r\n    ];\r\n  }\r\n  const splittedRules = rawRules.split(\"\\r\\n\\r\\n\");\r\n  //some \"wanted\" elements start with linebreaks or spaces so let's get rid of those\r\n  let trimmedRules = splittedRules.map((element) => {\r\n    let trimmedElement = element.trim();\r\n    //oddly enough \"\\r\\n\" is 3 characters\r\n    if (element.slice(0, 3) === \"\\r\\n\") {\r\n      trimmedElement = element.slice(3);\r\n      trimmedElement.trim(); //in case there are spaces after linebreak\r\n    }\r\n    return trimmedElement;\r\n  });\r\n\r\n  //Filter out everything that doesn't start with a number\r\n  let filteredRules = trimmedRules.filter((value) => !isNaN(value[0]));\r\n\r\n  //removing the contents listing. There must be a better way to do this - I'll come back to this when time allows.\r\n  for (let i = 0; i < 9; i++) {\r\n    filteredRules.shift();\r\n  }\r\n\r\n  //console.log(\"parser, filtered: \", filteredRules);\r\n\r\n  //Let's now build a JSON object from the rules\r\n  let parsedRules = [];\r\n\r\n  //create sections\r\n  filteredRules.forEach((element) => {\r\n    //section numbers are of form \"x. \". if the rules ever expand to double digit sections this is covered..\r\n    if (element[2] === \" \") {\r\n      parsedRules.push({\r\n        id: element.slice(0, 2),\r\n        title: element.slice(3),\r\n        chapters: [],\r\n      });\r\n    } else if (element[3] === \" \") {\r\n      parsedRules.push({\r\n        id: element.slice(0, 3),\r\n        title: element.slice(4),\r\n        chapters: [],\r\n      });\r\n    }\r\n    //chapter numbers are of form \"xxx. \"\r\n    else if (!isNaN(element.slice(0, 3)) && element[4] === \" \") {\r\n      let section = parseInt(element[0]) - 1;\r\n      parsedRules[section].chapters.push({\r\n        id: element.slice(0, 4),\r\n        title: element.slice(5),\r\n        rules: [],\r\n      });\r\n      //rule numbers are of form \"xxx.x...\" (x is a number).\r\n    } else if (!isNaN(element.slice(0, 3)) && !isNaN(element[4])) {\r\n      let section = parseInt(element[0]) - 1;\r\n      let chapterIndex = parseInt(element.slice(1, 3));\r\n      if (parsedRules[section].chapters[chapterIndex] !== undefined) {\r\n        //there are undefineds so this is neccessary, but it also means there's an issue which I'll have to look into at some point\r\n        let rule = {\r\n          id: element.slice(0, element.indexOf(\" \")),\r\n          rule: element.slice(element.indexOf(\" \") + 1),\r\n          example: \"\",\r\n        };\r\n        if (rule.rule.indexOf(\"Example\") !== -1) {\r\n          //if there's an example\r\n          rule.rule = element.slice(\r\n            element.indexOf(\" \") + 1,\r\n            element.indexOf(\"Example\")\r\n          );\r\n          rule.example = element.slice(element.indexOf(\"Example\"));\r\n        }\r\n        parsedRules[section].chapters[chapterIndex].rules.push(rule);\r\n      }\r\n    }\r\n  });\r\n  //console.log(\"parser: \", parsedRules);\r\n  return parsedRules;\r\n  //hard coded for development\r\n  /*   let parsed = [\r\n    {\r\n      id: \"1.\",\r\n      title: \"Game Concepts\",\r\n      chapters: [\r\n        {\r\n          id: \"100.\",\r\n          title: \"General\",\r\n          rules: [\r\n            {\r\n              id: \"100.1.\",\r\n              rule: \"These Magic rules apply to any Magic...\",\r\n              example: \"\",\r\n            },\r\n            {\r\n              id: \"100.1a\",\r\n              rule: \"A two-player game is a game that begins with only two players.\",\r\n              example: \"\",\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          id: \"101.\",\r\n          title: \"The Magic Golden Rules\",\r\n          rules: [\r\n            {\r\n              id: \"101.1\",\r\n              rule: \"Whenever a cardâ€™s text directly contradicts these ...\",\r\n              example: \"\",\r\n            },\r\n            {\r\n              id: \"101.2\",\r\n              rule: \"When a rule or effect allows or directs something to...\",\r\n              example: \"\",\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      id: \"2.\",\r\n      title: \"Parts of a Card\",\r\n      chapters: [\r\n        {\r\n          id: \"200.\",\r\n          title: \"General\",\r\n          rules: [\r\n            {\r\n              id: \"200.1.\",\r\n              rule: \"The parts of a card are name, mana cost, illustration, color indicator...\",\r\n              example: \"\",\r\n            },\r\n            {\r\n              id: \"200.2\",\r\n              rule: \"Some parts of a card are also characteristics of the object that...\",\r\n              example: \"\",\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          id: \"201.\",\r\n          title: \"Name\",\r\n          rules: [\r\n            {\r\n              id: \"201.1\",\r\n              rule: \"The name of a card is printed...\",\r\n              example: \"\",\r\n            },\r\n            {\r\n              id: \"201.2\",\r\n              rule: \"A cardâ€™s name is always considered to be the English...\",\r\n              example:\r\n                \"Example: when you test an app it ahelps to have example texts\",\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n  ];\r\n  return parsed; */\r\n};\r\n\r\nexport default parser;\r\n","import React from \"react\";\r\nimport \"./rule.styles.css\";\r\n\r\nconst Rule = ({ id, rule, example }) => {\r\n  return (\r\n    <>\r\n      <p>{id + \" \" + rule}</p>\r\n      <p className=\"example\">{example}</p>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Rule;\r\n","import React from \"react\";\r\nimport Rule from \"../rule/rule.component\";\r\nimport \"./chapter.styles.css\";\r\n\r\nconst Chapter = ({ id, title, rules }) => {\r\n  return (\r\n    <section className=\"chapter\">\r\n      <h3>{id + \" \" + title}</h3>\r\n      {rules.map(({ id, rule, example }) => (\r\n        <Rule key={id} id={id} rule={rule} example={example} />\r\n      ))}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Chapter;\r\n","import React from \"react\";\r\n\r\nconst ChapterSelector = ({ id, title }) => {\r\n  return <h4>{id + \" \" + title}</h4>;\r\n};\r\n\r\nexport default ChapterSelector;\r\n","import React from \"react\";\r\nimport ChapterSelector from \"../chapter-selector/chapter-selector.component\";\r\n\r\nconst Section = ({ id, title, chapters }) => {\r\n  return (\r\n    <section>\r\n      <h3>{id + \" \" + title}</h3>\r\n      {chapters.map(({ id, title, rules }) => (\r\n        <ChapterSelector key={id} id={id} title={title} />\r\n      ))}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Section;\r\n","import React from \"react\";\r\nimport Section from \"../section/section.component\";\r\nimport \"./table-of-contents.styles.css\";\r\n\r\nconst TableOfContents = ({ parsedRules }) => {\r\n  return (\r\n    <div className=\"table-of-contents\">\r\n      <h2>Contents</h2>\r\n      {parsedRules.map(({ id, title, chapters }) => (\r\n        <Section key={id} id={id} title={title} chapters={chapters} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TableOfContents;\r\n","import React from \"react\";\r\nimport \"./search-box.styles.css\";\r\n\r\nconst SearchBox = ({ placeholder, handleChange }) => (\r\n  <div className=\"search-bar\">\r\n    <input\r\n      className=\"search\"\r\n      type=\"search\"\r\n      placeholder={placeholder}\r\n      onChange={handleChange}\r\n    />\r\n  </div>\r\n);\r\nexport default SearchBox;\r\n","/*\nTODO: \n  error handling (when fetch fails at the very least)\n  event handlers for Contents\n  filter with search\n  Usability (collapsing sections in toc, next/previous chapter buttons)\n  possibility to show all rules at the same time and search them\n  first styling pass (at least a dark mode)\n  Extra features (hyperlink when a rule references another, possibility for user to select alternative file by URL)\n  optimize parser and make it more robust so there's maybe a possibility of reading a different txt file...\n*/\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport parser from \"./parser/parser\";\nimport Chapter from \"./components/chapter/chapter.component\";\nimport TableOfContents from \"./components/table-of-contents/table-of-contents.component\";\nimport SearchBox from \"./components/search-box/search-box.component\";\n\nconst App = () => {\n  const [rules, setRules] = useState(\"\");\n  const [selectedSection, setSelectedSection] = useState(\"1.\"); //separate from selectedChapter to allow dynamic Contents view\n  const [selectedChapter, setSelectedChapter] = useState(\"100.\");\n  const [selectedChapterData, setSelectedChapterData] = useState({\n    id: \"100.\",\n    rules: [{ id: \"100.1.\", rule: \"Loading Rules...\" }],\n  });\n  //cors proxy is fine for fetching static data without credentials\n  /* const [rulesUrl, setRulesUrl] = useState(\n    \"https://thingproxy.freeboard.io/fetch/https://media.wizards.com/2021/downloads/MagicCompRules%2020210419.txt\"\n  ); */\n  const rulesUrl =\n    \"https://media.wizards.com/2021/downloads/MagicCompRules%2020210419.txt\";\n  //placeholder object needed, because I anticipate fetching and parsing the rules to potentially take a few seconds\n  const [parsedRules, setParsedRules] = useState([\n    {\n      id: \"1.\",\n      chapters: [\n        { id: \"100.\", rules: [{ id: \"100.1.\", rule: \"Loading Rules...\" }] },\n      ],\n    },\n  ]);\n  const updateSection = (section) => {\n    setSelectedSection(section);\n  };\n  const updateChapter = (chapter) => {\n    setSelectedChapter(chapter);\n  };\n  //fetch rules. Remember to add error handling at some point\n  useEffect(() => {\n    fetch(rulesUrl)\n      .then((response) => {\n        return response.text();\n      })\n      .then((textString) => {\n        setRules(textString);\n      });\n  }, [rulesUrl]);\n  //parse the rules\n  useEffect(() => {\n    setParsedRules(parser(rules));\n  }, [rules]);\n  //set what is shown in main view. Requires that parsedRules exists and has correct data structure. Remember to add error handling at some point\n  useEffect(() => {\n    setSelectedChapterData(\n      parsedRules\n        .find((section) => section.id === selectedSection)\n        .chapters.find((chapter) => chapter.id === selectedChapter)\n    );\n  }, [parsedRules, selectedChapter, selectedChapterData, selectedSection]);\n  return (\n    <div className=\"App\">\n      <header className=\"page-header\">MtG Rules</header>\n      <section>\n        Under development, search and table of components non-functional. That\n        means there's no way to cyrrently see any other rules than chapter 100.,\n        but please come back tomorrow.\n      </section>\n      <SearchBox placeholder=\"Search\" />\n      <div className=\"container\">\n        <Chapter\n          id={selectedChapterData.id}\n          title={selectedChapterData.title}\n          rules={selectedChapterData.rules}\n        />\n        <TableOfContents\n          parsedRules={parsedRules}\n          changeSection={updateSection}\n          changeChapter={updateChapter}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n//import reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}