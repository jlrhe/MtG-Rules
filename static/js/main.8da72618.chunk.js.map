{"version":3,"sources":["parser/parser.js","components/rule/rule.component.jsx","components/chapter/chapter.component.jsx","components/chapter-selector/chapter-selector.component.jsx","components/section/section.component.jsx","components/table-of-contents/table-of-contents.component.jsx","components/search-box/search-box.component.jsx","components/button/button.component.jsx","components/navigation-buttons/navigation-buttons.jsx","App.js","index.js"],"names":["parser","rawRules","length","undefined","id","title","chapters","rules","rule","filteredRules","split","map","element","trimmedElement","trim","slice","filter","value","isNaN","i","shift","parsedRules","forEach","push","parseInt","section","chapterIndex","indexOf","example","Rule","className","Chapter","sectionTitle","searchString","toLowerCase","includes","ChapterSelector","chapterChange","onClick","Section","handleChapterChange","chapter","openedClassName","trigger","TableOfContents","sectionChange","nextChapter","previousChapter","SearchBox","placeholder","handleChange","type","onChange","Button","handleClick","text","disabled","hidden","NavigationButtons","App","useState","setRules","selectedSection","setSelectedSection","selectedChapter","setSelectedChapter","searchField","setSearchField","selectedChapterData","setSelectedChapterData","rulesUrl","setParsedRules","handleSectionChange","console","log","findChapter","sectionToFind","chapterToFind","find","handleFetchError","response","ok","alert","Error","statusText","useEffect","fetch","then","textString","catch","error","e","target","findSection","toString","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8da72618.chunk.js","sourcesContent":["const parser = (rawRules) => {\r\n  //if the rules haven't been fetched yet\r\n  if (rawRules.length <= 0 || rawRules === undefined) {\r\n    return [\r\n      {\r\n        id: 1,\r\n        title: \"loading...\",\r\n        chapters: [\r\n          {\r\n            id: 100,\r\n            title: \"loading...\",\r\n            rules: [{ id: \"100.1.\", rule: \"Loading Rules...\" }],\r\n          },\r\n        ],\r\n      },\r\n    ];\r\n  }\r\n  const splittedRules = rawRules.split(\"\\r\\n\\r\\n\");\r\n  //some \"wanted\" elements start with linebreaks or spaces so let's get rid of those\r\n  let trimmedRules = splittedRules.map((element) => {\r\n    let trimmedElement = element.trim();\r\n    //oddly enough \"\\r\\n\" is 3 characters\r\n    if (element.slice(0, 3) === \"\\r\\n\") {\r\n      trimmedElement = element.slice(3);\r\n      trimmedElement.trim(); //in case there are spaces after linebreak\r\n    }\r\n    return trimmedElement;\r\n  });\r\n\r\n  //Filter out everything that doesn't start with a number\r\n  let filteredRules = trimmedRules.filter((value) => !isNaN(value[0]));\r\n\r\n  //removing the contents listing. There must be a better way to do this - I'll come back to this when time allows.\r\n  for (let i = 0; i < 9; i++) {\r\n    filteredRules.shift();\r\n  }\r\n\r\n  //console.log(\"parser, filtered: \", filteredRules);\r\n\r\n  //Let's now build a JSON object from the rules\r\n  let parsedRules = [];\r\n\r\n  //create sections\r\n  filteredRules.forEach((element) => {\r\n    //section numbers are of form \"x. \". if the rules ever expand to double digit sections this is covered..\r\n    if (element[2] === \" \") {\r\n      parsedRules.push({\r\n        id: parseInt(element.slice(0, 1)),\r\n        title: element.slice(3),\r\n        chapters: [],\r\n      });\r\n    } else if (element[3] === \" \") {\r\n      parsedRules.push({\r\n        id: parseInt(element.slice(0, 2)),\r\n        title: element.slice(4),\r\n        chapters: [],\r\n      });\r\n    }\r\n    //chapter numbers are of form \"xxx. \"\r\n    else if (!isNaN(element.slice(0, 3)) && element[4] === \" \") {\r\n      let section = parseInt(element[0]) - 1;\r\n      parsedRules[section].chapters.push({\r\n        id: parseInt(element.slice(0, 3)),\r\n        title: element.slice(5),\r\n        rules: [],\r\n      });\r\n      //rule numbers are of form \"xxx.x...\" (x is a number).\r\n    } else if (!isNaN(element.slice(0, 3)) && !isNaN(element[4])) {\r\n      let section = parseInt(element[0]) - 1;\r\n      let chapterIndex = parseInt(element.slice(1, 3));\r\n      if (parsedRules[section].chapters[chapterIndex] !== undefined) {\r\n        //there are undefineds so this is neccessary, but it also means there's an issue which I'll have to look into at some point\r\n        let rule = {\r\n          id: element.slice(0, element.indexOf(\" \")),\r\n          rule: element.slice(element.indexOf(\" \") + 1),\r\n          example: \"\",\r\n        };\r\n        if (rule.rule.indexOf(\"Example\") !== -1) {\r\n          //if there's an example\r\n          rule.rule = element.slice(\r\n            element.indexOf(\" \") + 1,\r\n            element.indexOf(\"Example\")\r\n          );\r\n          rule.example = element.slice(element.indexOf(\"Example\"));\r\n        }\r\n        parsedRules[section].chapters[chapterIndex].rules.push(rule);\r\n      }\r\n    }\r\n  });\r\n  //console.log(\"parser: \", parsedRules);\r\n  return parsedRules;\r\n  //hard coded for development\r\n  /*   let parsed = [\r\n    {\r\n      id: \"1.\",\r\n      title: \"Game Concepts\",\r\n      chapters: [\r\n        {\r\n          id: \"100.\",\r\n          title: \"General\",\r\n          rules: [\r\n            {\r\n              id: \"100.1.\",\r\n              rule: \"These Magic rules apply to any Magic...\",\r\n              example: \"\",\r\n            },\r\n            {\r\n              id: \"100.1a\",\r\n              rule: \"A two-player game is a game that begins with only two players.\",\r\n              example: \"\",\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          id: \"101.\",\r\n          title: \"The Magic Golden Rules\",\r\n          rules: [\r\n            {\r\n              id: \"101.1\",\r\n              rule: \"Whenever a card’s text directly contradicts these ...\",\r\n              example: \"\",\r\n            },\r\n            {\r\n              id: \"101.2\",\r\n              rule: \"When a rule or effect allows or directs something to...\",\r\n              example: \"\",\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      id: \"2.\",\r\n      title: \"Parts of a Card\",\r\n      chapters: [\r\n        {\r\n          id: \"200.\",\r\n          title: \"General\",\r\n          rules: [\r\n            {\r\n              id: \"200.1.\",\r\n              rule: \"The parts of a card are name, mana cost, illustration, color indicator...\",\r\n              example: \"\",\r\n            },\r\n            {\r\n              id: \"200.2\",\r\n              rule: \"Some parts of a card are also characteristics of the object that...\",\r\n              example: \"\",\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          id: \"201.\",\r\n          title: \"Name\",\r\n          rules: [\r\n            {\r\n              id: \"201.1\",\r\n              rule: \"The name of a card is printed...\",\r\n              example: \"\",\r\n            },\r\n            {\r\n              id: \"201.2\",\r\n              rule: \"A card’s name is always considered to be the English...\",\r\n              example:\r\n                \"Example: when you test an app it ahelps to have example texts\",\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n  ];\r\n  return parsed; */\r\n};\r\n\r\nexport default parser;\r\n","import React from \"react\";\r\nimport \"./rule.styles.css\";\r\n\r\nconst Rule = ({ id, rule, example }) => {\r\n  return (\r\n    <>\r\n      <p>{id + \" \" + rule}</p>\r\n      <p className=\"example\">{example}</p>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Rule;\r\n","import React from \"react\";\r\nimport Rule from \"../rule/rule.component\";\r\nimport \"./chapter.styles.css\";\r\n\r\nconst Chapter = ({ id, title, sectionTitle, rules, searchString }) => {\r\n  const filteredRules = rules.filter((rule) =>\r\n    rule.rule.toLowerCase().includes(searchString.toLowerCase())\r\n  );\r\n  return (\r\n    <section className=\"chapter\">\r\n      <h2>{sectionTitle}</h2>\r\n      <h3>{id + \". \" + title}</h3>\r\n      {filteredRules.map(({ id, rule, example }) => (\r\n        <Rule key={id} id={id} rule={rule} example={example} />\r\n      ))}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Chapter;\r\n","import React from \"react\";\r\nimport \"./chapter-selector.styles.css\";\r\n\r\nconst ChapterSelector = ({ id, title, chapterChange }) => {\r\n  const handleClick = () => {\r\n    chapterChange(id);\r\n  };\r\n  return (\r\n    <button className=\"chapter-selector\" onClick={handleClick}>\r\n      {id + \" \" + title}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default ChapterSelector;\r\n","import React from \"react\";\r\nimport ChapterSelector from \"../chapter-selector/chapter-selector.component\";\r\nimport \"./section.styles.css\";\r\nimport Collapsible from \"react-collapsible\";\r\n\r\nconst Section = ({ id, title, chapters, chapterChange }) => {\r\n  const handleChapterChange = (chapter) => {\r\n    chapterChange(chapter);\r\n  };\r\n  return (\r\n    <section className=\"section\">\r\n      <Collapsible\r\n        className=\"closed\"\r\n        openedClassName=\"open\"\r\n        trigger={id + \". \" + title}\r\n      >\r\n        {chapters.map(({ id, title, rules }) => (\r\n          <ChapterSelector\r\n            chapterChange={handleChapterChange}\r\n            key={id}\r\n            id={id}\r\n            title={title}\r\n          />\r\n        ))}\r\n      </Collapsible>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Section;\r\n","import React from \"react\";\r\nimport Section from \"../section/section.component\";\r\nimport \"./table-of-contents.styles.css\";\r\n\r\nconst TableOfContents = ({\r\n  parsedRules,\r\n  sectionChange,\r\n  chapterChange,\r\n  nextChapter,\r\n  previousChapter,\r\n}) => {\r\n  const handleChapterChange = (chapter) => {\r\n    chapterChange(chapter);\r\n  };\r\n  return (\r\n    <div className=\"table-of-contents\">\r\n      <h2>Contents</h2>\r\n      {parsedRules.map(({ id, title, chapters }) => (\r\n        <Section\r\n          key={id}\r\n          id={id}\r\n          title={title}\r\n          chapters={chapters}\r\n          chapterChange={handleChapterChange}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TableOfContents;\r\n","import React from \"react\";\r\nimport \"./search-box.styles.css\";\r\n\r\nconst SearchBox = ({ placeholder, handleChange }) => (\r\n  <div className=\"search-bar\">\r\n    <input\r\n      className=\"search\"\r\n      type=\"search\"\r\n      placeholder={placeholder}\r\n      onChange={handleChange}\r\n    />\r\n  </div>\r\n);\r\nexport default SearchBox;\r\n","import React from \"react\";\r\nimport \"./button.styles.css\";\r\n\r\nconst Button = ({\r\n  type,\r\n  handleClick,\r\n  text,\r\n  disabled = false,\r\n  hidden = false,\r\n}) => {\r\n  if (hidden) {\r\n    return <></>;\r\n  } else\r\n    return (\r\n      <button disabled={disabled} className={type} onClick={handleClick}>\r\n        {text}\r\n      </button>\r\n    );\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport \"./navigation-buttons.css\";\r\nimport Button from \"../button/button.component\";\r\n\r\nconst NavigationButtons = ({ nextChapter, previousChapter }) => {\r\n  const handleNextChapter = () => {\r\n    nextChapter();\r\n  };\r\n  const handlePreviousChapter = () => {\r\n    previousChapter();\r\n  };\r\n  return (\r\n    <div className=\"container\">\r\n      <Button\r\n        type=\"navigation\"\r\n        text=\"&lt;= Chapter\"\r\n        handleClick={handlePreviousChapter}\r\n      />\r\n      <Button type=\"navigation\" text=\"&lt;=&lt;= Section\" />\r\n      <Button type=\"navigation\" text=\"Section=&gt;=&gt;\" />\r\n      <Button\r\n        type=\"navigation\"\r\n        text=\"Chapter=&gt;\"\r\n        handleClick={handleNextChapter}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default NavigationButtons;\r\n","/*\nTODO: \n  Usability (collapsing sections in toc)\n  possibility to show all rules at the same time and search them\n  fix parser (chapter 505 -> affects 506-514)\n  second styling pass (at least a dark mode)\n  Extra features (hyperlink when a rule references another, possibility for user to select alternative file by URL)\n  optimize parser and make it more robust so there's maybe a possibility of reading a different txt file...\n*/\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport parser from \"./parser/parser\";\nimport Chapter from \"./components/chapter/chapter.component\";\nimport TableOfContents from \"./components/table-of-contents/table-of-contents.component\";\nimport SearchBox from \"./components/search-box/search-box.component\";\nimport NavigationButtons from \"./components/navigation-buttons/navigation-buttons\";\n\nconst App = () => {\n  const [rules, setRules] = useState(\"\");\n  const [selectedSection, setSelectedSection] = useState(1); //separate from selectedChapter to allow dynamic Contents view\n  const [selectedChapter, setSelectedChapter] = useState(100);\n  const [searchField, setSearchField] = useState(\"\");\n  const [selectedChapterData, setSelectedChapterData] = useState({\n    id: 100,\n    title: \"loading...\",\n    rules: [{ id: \"100.1.\", rule: \"Loading Rules...\" }],\n  });\n  //cors proxy is fine for fetching static data without credentials\n  const [rulesUrl, setRulesUrl] = useState(\n    \"https://frozen-dawn-34650.herokuapp.com/media.wizards.com/2021/downloads/MagicCompRules%2020210419.txt\"\n  );\n\n  //placeholder object needed, because I anticipate fetching and parsing the rules to potentially take a few seconds\n  const [parsedRules, setParsedRules] = useState([\n    {\n      id: 1,\n      title: \"loading...\",\n      chapters: [\n        {\n          id: 100,\n          title: \"loading...\",\n          rules: [{ id: \"100.1.\", rule: \"Loading Rules...\" }],\n        },\n      ],\n    },\n  ]);\n\n  const handleSectionChange = (section) => {\n    console.log(\"set Section: \", section);\n    setSelectedSection(parseInt(section));\n  };\n  const handleChapterChange = (chapter) => {\n    console.log(\n      \"chapterChange section argument: \",\n      parseInt(chapter.toString()[0])\n    );\n    if (parseInt(chapter.toString()[0]) !== selectedSection) {\n      handleSectionChange(parseInt(chapter.toString()[0]));\n    }\n    console.log(\"set chapter: \", selectedChapter);\n    setSelectedChapter(chapter);\n  };\n  const findChapter = (sectionToFind, chapterToFind) => {\n    console.log(\"findchapterdata: \", parsedRules);\n    console.log(\"findchapterSection: \", sectionToFind);\n    console.log(\"findchapter: \", chapterToFind);\n    return parsedRules\n      .find((section) => section.id === parseInt(sectionToFind))\n      .chapters.find((chapter) => chapter.id === parseInt(chapterToFind));\n  };\n  const findSection = (sectionToFind = selectedSection) => {\n    return parsedRules.find((section) => section.id === sectionToFind);\n  };\n  const nextChapter = () => {\n    if (findChapter(selectedSection, selectedChapter + 1) === undefined) {\n      console.log(\"last chapter\");\n    } else {\n      console.log(\"next chapter\");\n      setSelectedChapter(selectedChapter + 1);\n    }\n  };\n  const previousChapter = () => {\n    if (selectedChapter === selectedSection * 100) {\n      console.log(\"first chapter\");\n    } else {\n      setSelectedChapter(selectedChapter - 1);\n    }\n  };\n  const handleFetchError = (response) => {\n    if (!response.ok) {\n      alert(\n        \"There was an error fetching the rules. \\n Please try again when the winds of magic are more favorable.\"\n      );\n      throw Error(response.statusText);\n    }\n    return response;\n  };\n  const handleSearchEvent = (e) => {\n    setSearchField(e.target.value);\n    console.log(searchField);\n  };\n\n  //fetch rules. Remember to add error handling at some point\n  useEffect(() => {\n    fetch(rulesUrl)\n      .then(handleFetchError)\n      .then((response) => {\n        return response.text();\n      })\n      .then((textString) => {\n        setRules(textString);\n        console.log(\"rules set\");\n      })\n      .catch((error) => {\n        alert(\n          \"There was an error fetching the rules. \\n Please try again when the winds of magic are more favorable.\"\n        );\n        console.log(error);\n      });\n  }, [rulesUrl]);\n  //parse the rules\n  useEffect(() => {\n    setParsedRules(parser(rules));\n    console.log(\"parsing rules\");\n  }, [rules]);\n  //set what is shown in main view. Requires that parsedRules exists and has correct data structure. Remember to add error handling at some point\n  useEffect(() => {\n    setSelectedChapterData(findChapter(selectedSection, selectedChapter));\n    console.log(\"parsed rules change: chapter data update\");\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [parsedRules, selectedChapter, selectedSection]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"page-header\">MtG Rules</header>\n      <section>\n        Under development. I am aware of the problem with chapters 505-514. I am\n        also aware that the site is ugly and that there are usability issues.\n        I'm working on it.\n      </section>\n      <SearchBox placeholder=\"Search\" handleChange={handleSearchEvent} />\n      <div className=\"main-container\">\n        <div className=\"main-view\">\n          <NavigationButtons\n            nextChapter={nextChapter}\n            previousChapter={previousChapter}\n          ></NavigationButtons>\n          <Chapter\n            id={selectedChapterData.id}\n            title={selectedChapterData.title}\n            sectionTitle={findSection(selectedSection).title}\n            rules={selectedChapterData.rules}\n            searchString={searchField}\n          />\n          <NavigationButtons\n            className=\"bottom-navigation\"\n            nextChapter={nextChapter}\n            previousChapter={previousChapter}\n          ></NavigationButtons>\n        </div>\n        <TableOfContents\n          parsedRules={parsedRules}\n          nextChapter={nextChapter}\n          previousChapter={previousChapter}\n          sectionChange={handleSectionChange}\n          chapterChange={handleChapterChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n//import reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}